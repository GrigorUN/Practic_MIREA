// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2023 11:20:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LAB_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LAB_4_vlg_sample_tst(
	a,
	b,
	clock,
	sampler_tx
);
input  a;
input  b;
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LAB_4_vlg_check_tst (
	newq0,
	newq1,
	newq2,
	newq3,
	q,
	sampler_rx
);
input  newq0;
input  newq1;
input  newq2;
input  newq3;
input [3:0] q;
input sampler_rx;

reg  newq0_expected;
reg  newq1_expected;
reg  newq2_expected;
reg  newq3_expected;
reg [3:0] q_expected;

reg  newq0_prev;
reg  newq1_prev;
reg  newq2_prev;
reg  newq3_prev;
reg [3:0] q_prev;

reg  newq0_expected_prev;
reg  newq1_expected_prev;
reg  newq2_expected_prev;
reg  newq3_expected_prev;
reg [3:0] q_expected_prev;

reg  last_newq0_exp;
reg  last_newq1_exp;
reg  last_newq2_exp;
reg  last_newq3_exp;
reg [3:0] last_q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	newq0_prev = newq0;
	newq1_prev = newq1;
	newq2_prev = newq2;
	newq3_prev = newq3;
	q_prev = q;
end

// update expected /o prevs

always @(trigger)
begin
	newq0_expected_prev = newq0_expected;
	newq1_expected_prev = newq1_expected;
	newq2_expected_prev = newq2_expected;
	newq3_expected_prev = newq3_expected;
	q_expected_prev = q_expected;
end



// expected newq0
initial
begin
	newq0_expected = 1'bX;
end 

// expected newq1
initial
begin
	newq1_expected = 1'bX;
end 

// expected newq2
initial
begin
	newq2_expected = 1'bX;
end 

// expected newq3
initial
begin
	newq3_expected = 1'bX;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// generate trigger
always @(newq0_expected or newq0 or newq1_expected or newq1 or newq2_expected or newq2 or newq3_expected or newq3 or q_expected or q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected newq0 = %b | expected newq1 = %b | expected newq2 = %b | expected newq3 = %b | expected q = %b | ",newq0_expected_prev,newq1_expected_prev,newq2_expected_prev,newq3_expected_prev,q_expected_prev);
	$display("| real newq0 = %b | real newq1 = %b | real newq2 = %b | real newq3 = %b | real q = %b | ",newq0_prev,newq1_prev,newq2_prev,newq3_prev,q_prev);
`endif
	if (
		( newq0_expected_prev !== 1'bx ) && ( newq0_prev !== newq0_expected_prev )
		&& ((newq0_expected_prev !== last_newq0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newq0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newq0_expected_prev);
		$display ("     Real value = %b", newq0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_newq0_exp = newq0_expected_prev;
	end
	if (
		( newq1_expected_prev !== 1'bx ) && ( newq1_prev !== newq1_expected_prev )
		&& ((newq1_expected_prev !== last_newq1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newq1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newq1_expected_prev);
		$display ("     Real value = %b", newq1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newq1_exp = newq1_expected_prev;
	end
	if (
		( newq2_expected_prev !== 1'bx ) && ( newq2_prev !== newq2_expected_prev )
		&& ((newq2_expected_prev !== last_newq2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newq2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newq2_expected_prev);
		$display ("     Real value = %b", newq2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_newq2_exp = newq2_expected_prev;
	end
	if (
		( newq3_expected_prev !== 1'bx ) && ( newq3_prev !== newq3_expected_prev )
		&& ((newq3_expected_prev !== last_newq3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newq3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newq3_expected_prev);
		$display ("     Real value = %b", newq3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_newq3_exp = newq3_expected_prev;
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LAB_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg clock;
// wires                                               
wire newq0;
wire newq1;
wire newq2;
wire newq3;
wire [3:0] q;

wire sampler;                             

// assign statements (if any)                          
LAB_4 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.clock(clock),
	.newq0(newq0),
	.newq1(newq1),
	.newq2(newq2),
	.newq3(newq3),
	.q(q)
);

// a
initial
begin
	repeat(2)
	begin
		a = 1'b0;
		a = #220000 1'b1;
		# 220000;
	end
	a = 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #440000 1'b1;
	b = #440000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

LAB_4_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.clock(clock),
	.sampler_tx(sampler)
);

LAB_4_vlg_check_tst tb_out(
	.newq0(newq0),
	.newq1(newq1),
	.newq2(newq2),
	.newq3(newq3),
	.q(q),
	.sampler_rx(sampler)
);
endmodule

