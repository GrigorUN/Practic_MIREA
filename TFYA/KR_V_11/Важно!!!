установить LLVMlite                                        https://chat.openai.com/share/b8ac3389-6158-43da-8671-9a7314e9a7cd
pip install llvmlite
установить RPLY
pip install rply
Читать https://proglib.io/p/your-own-programming-language

1. Операции языка:
   - 1.1. Операции группы "отношение": это операции, которые сравнивают два значения и возвращают результат в виде логического значения (истина или ложь). Примеры операций отношения включают != (не равно), == (равно), < (меньше), <= (меньше или равно), > (больше) и >= (больше или равно).
   - 1.2. Операции группы "сложение": это операции, которые выполняют сложение или конкатенацию двух значений. Например, операции сложения включают + (сложение чисел), - (вычитание), и || (конкатенация строк).
   - 1.3. Операции группы "умножение": это операции, которые выполняют умножение или деление двух значений. Например, операции умножения включают * (умножение чисел), / (деление чисел), и && (умножение логических значений).
   - 1.4. Унарная операция: это операция, которая применяется к одному операнду. Примером унарной операции является операция логического отрицания !, которая инвертирует логическое значение операнда.

2. Правила, определяющие структуру программы:
   - 2.1. Структура программы: программа состоит из объявления переменных, начала блока операторов, списков операторов и окончания программы. Примерный синтаксис выглядит так: 
   ```
   program var <описание> begin <оператор> {;<оператор>} end.
   ```

3. Правила, определяющие раздел описания переменных:
   - 3.1. Синтаксис команд описания данных: раздел описания переменных включает список идентификаторов переменных, тип данных, и точку с запятой в конце каждого описания. Примерный синтаксис выглядит так: 
   ```
   <описание>::= {<идентификатор> {, <идентификатор>} : <тип>;}
   ```

4. Правила, определяющие типы данных:
   - 4.1. Описание типов данных: язык программирования определяет различные типы данных, такие как целые числа (%), логические значения (!) и строки строковых символов ($).

5. Правило, определяющее оператор программы:
   - 5.1. Синтаксис составного оператора: составной оператор представляет собой блок операторов, заключенных в фигурные скобки. Список операторов разделены точкой с запятой: 
   ```
   <составной>::= begin <оператор> {;<оператор>} end
   ```

   - 5.2. Синтаксис оператора присваивания: оператор присваивания присваивает значение выражения переменной. Примерный синтаксис выглядит так: 
   ```
   <присваивания>::= <идентификатор> := <выражение>
   ```

   - 5.3. Синтаксис оператора условного перехода: оператор условного перехода (if) выполняет оператор, если заданное выражение истинно, иначе выполняется альтернативный оператор (else). Примерный синтаксис выглядит так: 
   ```
   <условный>::= if (<выражение>) <оператор> [else <оператор>]
   ```

   - 5.4. Синтаксис оператора цикла с фиксированным числом повторений: оператор цикла с фиксированным числом повторений (for) выполняет оператор заданное количество раз в заданном диапазоне значений. Примерный синтаксис выглядит так: 
   ```
   <фиксированного_цикла>::= for <присваивания> to <выражение> [step <выражение>] <оператор> next
   ```

   - 5.5. Синтаксис условного оператора цикла: условный оператор цикла (while) выполняет оператор, пока заданное выражение истинно. Примерный синтаксис выглядит так: 
   ```
   <условного_цикла>::= while (<выражение>) <оператор>
   ```

   - 5.6. Синтаксис оператора ввода: оператор ввода (readln) считывает значения из входного потока и присваивает их переменным. Примерный синтаксис выглядит так: 
   ```
   <ввода>::= readln <идентификатор> {, <идентификатор>}
   ```

   - 5.7. Синтаксис оператора вывода: оператор вывода (writeln) выводит значения выражений на экран или в файл. Примерный синтаксис выглядит так: 
   ```
   <вывода>::= writeln <выражение> {, <выражение>}
   ```

Надеюсь, это помогло вам понять структуру и операции в данном языке программирования. Если у вас есть еще вопросы, не стесняйтесь задавать!