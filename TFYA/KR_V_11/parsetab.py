
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE EQ GE GT ID LE LT MINUS MULTIPLY NE NOT NUMBER PLUSexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | NOT expression\n                  | NUMBER\n                  | ID\n    '
    
_lr_action_items = {'NOT':([0,2,5,6,7,8,9,10,11,12,13,14,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,2,5,6,7,8,9,10,11,12,13,14,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'ID':([0,2,5,6,7,8,9,10,11,12,13,14,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'$end':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[0,-12,-13,-11,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,]),'PLUS':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[5,-12,-13,5,5,5,5,5,5,5,5,5,5,5,]),'MINUS':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[6,-12,-13,6,6,6,6,6,6,6,6,6,6,6,]),'MULTIPLY':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[7,-12,-13,7,7,7,7,7,7,7,7,7,7,7,]),'DIVIDE':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[8,-12,-13,8,8,8,8,8,8,8,8,8,8,8,]),'LT':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[9,-12,-13,9,9,9,9,9,9,9,9,9,9,9,]),'LE':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[10,-12,-13,10,10,10,10,10,10,10,10,10,10,10,]),'GT':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[11,-12,-13,11,11,11,11,11,11,11,11,11,11,11,]),'GE':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[12,-12,-13,12,12,12,12,12,12,12,12,12,12,12,]),'EQ':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[13,-12,-13,13,13,13,13,13,13,13,13,13,13,13,]),'NE':([1,3,4,15,16,17,18,19,20,21,22,23,24,25,],[14,-12,-13,14,14,14,14,14,14,14,14,14,14,14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,5,6,7,8,9,10,11,12,13,14,],[1,15,16,17,18,19,20,21,22,23,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','1.py',50),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','1.py',51),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','1.py',52),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','1.py',53),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','1.py',54),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','1.py',55),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','1.py',56),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','1.py',57),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','1.py',58),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','1.py',59),
  ('expression -> NOT expression','expression',2,'p_expression_binop','1.py',60),
  ('expression -> NUMBER','expression',1,'p_expression_binop','1.py',61),
  ('expression -> ID','expression',1,'p_expression_binop','1.py',62),
]
