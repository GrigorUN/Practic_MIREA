statements      : NEWLINE* expr(NEWLINE+ expr)* NEWLINE

expr            : KEYWORD : var IDENTIFIER EQ expr
                : comp-expr ((KEYWORD:AND|KEYWORD:OR)comp-expr)*

comp-expr       : NOT comp-expr
                : artith-expr ((EE|LT|GT|LTE|GTE) artih-expr)*

artith-expr     : term ((PLUS|MINUS) term)*

term            : factor((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : atom(POW factor)*        
        
atom            : INT|FLOAT|STRING|IDENTIFIER
                : LPAREN expr RPAREN
                : if-expr

if-expr         : KEYWORD: if expr KEYWORD: then
                  (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:end if-expr-b|if-expr-c)

if-expr-b       : KEYWORD: elif expr KEYWORD: then
                  (expr if-expr-b|if-expr-c?)
                | (NEWLINE statements KEYWORD:end if-expr-b|if-expr-c)

if-expr-c       : KEYWORD:else
                  expr
                | (NEWLINE statements KEYWORD:end)

for-expr        : KEYWORD: for IDENTIFIER EQ expr KEYWORD: to expr
                  (KEYWORD:step expr)? KEYWORD: then 
                  expr
                | (NEWLINE statements KEYWORD:end)

while-expr      : KEYWORD: while expr KEYWORD: then 
                  expr
                | (NEWLINE statements KEYWORD:end)


